class Solution {
    HashSet<Integer> freq = new HashSet<>();
    public int func(int[] dp, int[] days, int[] costs,int day) {
        if (day > days[days.length - 1]) 
            return 0;
        if (!freq.contains(day)) 
            return func(dp, days, costs, day + 1);
        if (dp[day] != -1) 
            return dp[day];
        int day1 = costs[0] + func(dp, days, costs, day + 1);
        int day7 = costs[1] + func(dp, days, costs, day + 7);
        int day30 = costs[2] + func(dp, days, costs, day + 30);
        return dp[day] = Math.min(day1, Math.min(day7, day30));
    }
    public int mincostTickets(int[] days, int[] costs) {
        int i = days[days.length - 1];
        int dp[] = new int[i + 1];
        Arrays.fill(dp, -1);
        for (int num : days) 
            freq.add(num);
        return func(dp, days, costs, 1);
    }
}
